name: Build Docker Image

on:
  workflow_call:
    inputs:
      registry_addr:
        required: true
        type: string
      image_name:
        required: true
        type: string
      image_tag:
        required: false
        type: string
      dockerfile_path:
        required: true
        type: string
      method:
        required: true
        type: string
    secrets:
      artifactory_sa:
        required: true
      artifactory_pw:
        required: true
env:
  IMAGE_REPO: ${{ inputs.registry_addr }}
  IMAGE_REPO_USER: ${{ secrets.artifactory_sa }}
  IMAGE_REPO_PASSWORD: ${{ secrets.artifactory_pw }}
  IMAGE_TAG: ${{ inputs.image_tag }}
  IMAGE_NAME: ${{ inputs.image_name }}
  IMAGE_NAME_FULL: ${{ inputs.registry_addr }}/${{ inputs.image_name }}:${{ inputs.image_tag }}
  IMAGE_NAME_NOTAG: ${{ inputs.registry_addr }}/${{ inputs.image_name }}
  DOCKERFILE_PATH: ${{ inputs.dockerfile_path }}

jobs:
  image-kaniko-action-job:
    if: ${{ inputs.method == 'kaniko/action' }}
    runs-on: ubuntu-latest 

    name: Build alpine-awscli-python3 base image
    steps:
      - uses: actions/checkout@master

      - name: Set Build Tag as ENV
        run: |
          git config --global --add safe.directory '*'
          TAG=$(git tag --contains HEAD | head -n 1)
          SHORT_COMMIT_ID=$(echo $GITHUB_SHA | cut -c1-7)

          if [ "$GITHUB_EVENT_NAME" = "pull_request" ]; then
            BRANCH_NAME=${GITHUB_HEAD_REF}
          else
            BRANCH_NAME=${GITHUB_REF#refs/heads/}
          fi

          if [[ "$BRANCH_NAME" == "main" ]]; then
            echo "BUILD_TAG=latest" >> $GITHUB_ENV
          elif [[ "$BRANCH_NAME" =~ ^release* ]] && [[ -z "$TAG" ]] ;then
              PR_ID=$(git log | grep "Merge pull request" | head -n 1 | awk -F# '{print $2}' | awk '{print $1}')
              echo "BUILD_TAG=PR-${PR_ID}-$SHORT_COMMIT_ID" >> $GITHUB_ENV
          elif [[ "$BRANCH_NAME" =~ ^release* ]] && [[ ! -z "$TAG" ]] ;then
              echo "BUILD_TAG=$TAG" >> $GITHUB_ENV
          else
            PR_NAME=$(git branch | grep '^\*' | awk '{print $2}' | awk -F- '{print $1"-"$2}')
            echo "BUILD_TAG=${PR_NAME}-${SHORT_COMMIT_ID}" >> $GITHUB_ENV
          fi

      - name: 'Artifact: build && push alpine-awscli-python3 image'
        uses: aevea/action-kaniko@master
        with:
          tag: ${{ env.BUILD_TAG }}
          image: ${{ env.IMAGE_NAME }}
          build_file: 'Dockerfile'
          path: ${{ env.DOCKERFILE_PATH }}
          registry: ${{ env.IMAGE_REPO }}
          username: ${{ env.IMAGE_REPO_USER }}
          password: ${{ env.IMAGE_REPO_PASSWORD }}
          cache: true
          cache_registry: cache

  image-docker-node-job:
    if: ${{ inputs.method == 'docker/node' }}
    runs-on: ubuntu-latest 
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set Build Tag as ENV
        run: |
          git config --global --add safe.directory '*'
          TAG=$(git tag --contains HEAD | head -n 1)
          SHORT_COMMIT_ID=$(git rev-parse --short HEAD)
          BRANCH_NAME=$(git branch --show-current)

          if [[ "$BRANCH_NAME" == "main" ]]; then
            # 如果是 main 分支，BUILD_TAG 为 latest
            echo "BUILD_TAG=latest" >> $GITHUB_ENV
          elif [[ "$BRANCH_NAME" =~ ^release ]]; then
            # 如果是以 release 开头的分支，BUILD_TAG 为 release-$SHORT_COMMIT_ID
            echo "BUILD_TAG=release-$SHORT_COMMIT_ID" >> $GITHUB_ENV
          else
            # 其他分支，BUILD_TAG 为 ${BRANCH_NAME}-${SHORT_COMMIT_ID}
            echo "BUILD_TAG=${SHORT_COMMIT_ID}" >> $GITHUB_ENV
          fi

      - name: Build & push images
        run: |
          pwd
          cd ${{ env.DOCKERFILE_PATH }}
          echo ${{ env.IMAGE_REPO_PASSWORD }} | docker login ${{ env.IMAGE_REPO }} --username ${{ env.IMAGE_REPO_USER }} --password-stdin
          docker build --network host -t ${{ env.IMAGE_NAME_NOTAG }}:${{ env.BUILD_TAG }} -f Dockerfile .
          docker push ${{ env.IMAGE_NAME_NOTAG }}:${{ env.BUILD_TAG }}
          docker rmi ${{ env.IMAGE_FULL_NAME }} || true

  image-kaniko-container-job:
    if: ${{ inputs.method == 'kaniko/container' }}
    runs-on: ubuntu-latest 

    container:
      image: artifact.onwalk.net/public/base/alpine-image-builder:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set Build Tag as ENV
        run: |
          git config --global --add safe.directory '*'
          TAG=$(git tag --contains HEAD | head -n 1)
          SHORT_COMMIT_ID=$(echo $GITHUB_SHA | cut -c1-7)

          if [ "$GITHUB_EVENT_NAME" = "pull_request" ]; then
            BRANCH_NAME=${GITHUB_HEAD_REF}
          else
            BRANCH_NAME=${GITHUB_REF#refs/heads/}
          fi

          if [[ "$BRANCH_NAME" == "main" ]]; then
            echo "BUILD_TAG=latest" >> $GITHUB_ENV
          elif [[ "$BRANCH_NAME" =~ ^release\/ ]] && [[ -z "$TAG" ]] ;then
              PR_ID=$(git log | grep "Merge pull request" | head -n 1 | awk -F# '{print $2}' | awk '{print $1}')
              echo "BUILD_TAG=PR-${PR_ID}-$SHORT_COMMIT_ID" >> $GITHUB_ENV
          elif [[ "$BRANCH_NAME" =~ ^release\/ ]] && [[ ! -z "$TAG" ]] ;then
              echo "BUILD_TAG=$TAG" >> $GITHUB_ENV
          else
            PR_NAME=$(git branch | grep '^\*' | awk '{print $2}' | awk -F- '{print $1"-"$2}')
            echo "BUILD_TAG=${PR_NAME}-${SHORT_COMMIT_ID}" >> $GITHUB_ENV
          fi

      - name: Set up Kaniko Auth config for Docker registry v1
        run: sh /kaniko/setup-kaniko-auth.sh ${{ inputs.registry_addr }} ${{ secrets.artifactory_sa }} ${{ secrets.artifactory_pw }} true

      - name: Build Docker Image with Kaniko
        run: |
          echo "Building image: ${{ env.IMAGE_FULL_NAME }}"
          export GOOGLE_APPLICATION_CREDENTIALS=/kaniko/.docker/config.json
          /kaniko/executor \
              --dockerfile ${{ env.DOCKERFILE_PATH }}/Dockerfile \
              --destination "${{ env.IMAGE_NAME_NOTAG }}:${{ env.BUILD_TAG }}"  \
              --context ${{ env.DOCKERFILE_PATH }}
  image-docker-node-jrog-job:
    if: ${{ inputs.method == 'docker/jrog' }}
    runs-on: self-hosted

    steps:
      - uses: actions/checkout@v3

      - name: Set Build Tag as ENV
        run: |
          git config --global --add safe.directory '*'
          TAG=$(git tag --contains HEAD | head -n 1)
          SHORT_COMMIT_ID=$(echo $GITHUB_SHA | cut -c1-7)

          if [ "$GITHUB_EVENT_NAME" = "pull_request" ]; then
            BRANCH_NAME=${GITHUB_HEAD_REF}
          else
            BRANCH_NAME=${GITHUB_REF#refs/heads/}
          fi

          if [[ "$BRANCH_NAME" == "main" ]]; then
            echo "BUILD_TAG=latest" >> $GITHUB_ENV
          elif [[ "$BRANCH_NAME" =~ ^release\/ ]] && [[ -z "$TAG" ]] ;then
              PR_ID=$(git log | grep "Merge pull request" | head -n 1 | awk -F# '{print $2}' | awk '{print $1}')
              echo "BUILD_TAG=PR-${PR_ID}-$SHORT_COMMIT_ID" >> $GITHUB_ENV
          elif [[ "$BRANCH_NAME" =~ ^release\/ ]] && [[ ! -z "$TAG" ]] ;then
              echo "BUILD_TAG=$TAG" >> $GITHUB_ENV
          else
            PR_NAME=$(git branch | grep '^\*' | awk '{print $2}' | awk -F- '{print $1"-"$2}')
            echo "BUILD_TAG=${PR_NAME}-${SHORT_COMMIT_ID}" >> $GITHUB_ENV
          fi

      - name: Login to Artifactory
        uses: actions/login-action@v1
        with:
          registry: "${{ env.IMAGE_REPO }}"
          username: "${{ env.REPO_USER }}"
          password: "${{ env.REPO_PASSWORD }}"

      - name: Build & push images
        run: |
          cd ${{ env.DOCKERFILE_PATH }}
          docker build --network host -t ${{ env.DOCKER_IMAGE_FULL_NAME }} -f Dockerfile .
          docker push "${{ env.IMAGE_FULL_NAME }}"
          docker rmi ${{ env.DOCKER_IMAGE_FULL_NAME }} || true
