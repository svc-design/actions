
name: Workflow Call Setup VPN Gateway

on:
  workflow_call:
    inputs:
      domain:
        required: true
        type: string
      cluster_name:
        required: true
        type: string
      ssh_host_name:
        required: true
        type: string
      ssh_host_ip:
        required: false
        type: string
      dry-run:
        required: true
        type: string
      gateway_public_config:
        required: true
        type: string

    secrets:
      SSH_USER:
        required: true
      SSH_PRIVATE_KEY:
        required: true
      SUDO_PASSWORD:
        required: true
      ANSIBLE_VAULT_PASSWORD:
        required: true
      GATEWAY_PRIVATE_KEY:
        required: true

jobs:
  init-vpn-gateway:
    runs-on: ubuntu-latest
    env:
      DOMAIN: ${{ inputs.domain }}
      SSH_USER: ${{ secrets.SSH_USER }}
      SSH_HOST_IP: ${{ inputs.ssh_host_ip }}
      SSH_HOST_NAME: ${{ inputs.ssh_host_name }}
      SSH_HOST_DOMAIN: "${{ inputs.ssh_host_name }}.${{ inputs.domain }}"
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      ANSIBLE_VAULT_PASSWORD: ${{ secrets.ANSIBLE_VAULT_PASSWORD }}
      GATEWAY_PRIVATE_KEY: ${{ secrets.GATEWAY_PRIVATE_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: Pre Setup
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip jq
          #sudo snap install yq
          VERSION=v4.34.1 # 选择所需版本
          wget https://github.com/mikefarah/yq/releases/download/${VERSION}/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq
          pip3 install ansible jinja2 hvac
          ansible-galaxy collection install community.hashi_vault
          echo "${{ env.ANSIBLE_VAULT_PASSWORD }}" > ~/.vault_password && sudo chmod 0644 ~/.vault_password

      - name: Extract SSH Host IP and Set as Env Variable
        run: |
          if [ -n "${{ inputs.ssh_host_ip }}" ]; then
            echo "SSH_HOST_IP=${{ inputs.ssh_host_ip }}" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Update playbook hosts
        run: |
          python scripts/dynamic_inventory.py "vpn-gateway:${{ env.SSH_HOST_DOMAIN }}:${{ env.SSH_HOST_IP }}"
        working-directory: ansible/

      - name: Merge configurations into extra_vars.json
        run: |
          echo "${{ inputs.gateway_public_config }}" | yq eval -P - > gateway_public_config.yaml
          yq eval -n \
            --argfile gateway_public_config gateway_public_config.yaml \
            --arg GATEWAY_PRIVATE_KEY "${{ secrets.GATEWAY_PRIVATE_KEY }}" \
            --arg domain "${{ inputs.domain }}" \
            --arg ansible_become_pass "${{ env.SUDO_PASSWORD }}" \
            --arg cluster_name "${{ inputs.cluster_name }}" \
            --arg ansible_vault_password "${{ env.ANSIBLE_VAULT_PASSWORD }}" \
            --arg localhost_private_key "${{ env.GLOBAL_GATEWAY_PRIVATE_KEY }}" \
            '{
              "domain": $domain,
              "ansible_become_pass": $ansible_become_pass,
              "cluster_name": $cluster_name,
              "ansible_vault_password": $ansible_vault_password,
              "gateway": {
                "private_key": $GATEWAY_PRIVATE_KEY,
                "public_config": $gateway_public_config
              }
            }' > extra_vars.yaml
          yq eval -j extra_vars.yaml > extra_vars.json
          cat extra_vars.json
        working-directory: ansible/

      - name: Setup VPN Gateway
        shell: bash
        run: |
          export ANSIBLE_HOST_KEY_CHECKING=False
          ANSIBLE_OPTIONS=""
          if [ "${{ inputs.dry-run }}" == "true" ]; then
            ANSIBLE_OPTIONS="-D -C"
          fi
          ansible-playbook -i hosts/inventory playbooks/init_vpn_gateway.yml $ANSIBLE_OPTIONS -e '@extra_vars.json'
        working-directory: ansible/
